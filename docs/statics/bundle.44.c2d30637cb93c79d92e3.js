(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{136:function(e,n,t){var a={"./bash":122,"./bash.js":122,"./css":123,"./css.js":123,"./htmlbars":124,"./htmlbars.js":124,"./javascript":125,"./javascript.js":125,"./scss":126,"./scss.js":126,"./typescript":127,"./typescript.js":127};function s(e){var n=r(e);return t(n)}function r(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}s.keys=function(){return Object.keys(a)},s.resolve=r,e.exports=s,s.id=136},73:function(e,n,t){"use strict";var a=t(132),s=(t(133),t(134)),r=(t(135),function(){return a.createElement(a.Fragment,{},a.createElement("h1",{id:"form-schema-扩展规范",className:"react-demo-h1"},"Form Schema 扩展规范"),a.createElement("h2",{id:"背景",className:"react-demo-h2"},"背景"),a.createElement("p",{className:"react-demo-p"},"虽然 JSON Schema 是可以轻松描述数据结构，但是，原生标准规范却不支持 UI 相关的描述，所以，我们只能通过扩展 JSON schema 来做 UI 描述。"),a.createElement("h2",{id:"ui-组件描述",className:"react-demo-h2"},"UI 组件描述"),a.createElement("p",{className:"react-demo-p"},"为了描述具体 UI 组件，虽然我们有了基本数据类型（string/number/boolean/object/array/date），但是对于一些扩展组件还是需要一些特殊属性来描述，而且也有可能存在同一种数据类型，但 UI 展示却是不一样的情况，所以，对于 UI 组件描述，我们使用了 ",a.createElement("strong",{className:"react-demo-strong"},"x-component")," 属性来指定对应的 UI 组件："),a.createElement(s,{code:'{\n  "type": "string",\n  "x-component": "radio"\n}\n',justCode:!0,lang:"json"}),a.createElement("h2",{id:"表单校验描述",className:"react-demo-h2"},"表单校验描述"),a.createElement("p",{className:"react-demo-p"},"在表单场景中，校验是必不可少的，同样，为了描述字段的校验规则，我们又扩展了 ",a.createElement("strong",{className:"react-demo-strong"},"x-rules")," 来描述字段的校验规则："),a.createElement(s,{code:'{\n  "type": "string",\n  "x-rules": [\n    {\n      "pattern": "\\\\d+",\n      "message": "必须是数字"\n    }\n  ],\n  "x-component": "radio"\n}\n',justCode:!0,lang:"json"}),a.createElement("h2",{id:"表单组件属性描述",className:"react-demo-h2"},"表单组件属性描述"),a.createElement("p",{className:"react-demo-p"},"每个表单组件其实都会有自己的一套属性，有控制交互行为的，也有控制样式的，但是这些都与 JSON Schema 无关，所以我们只能继续扩展 ",a.createElement("strong",{className:"react-demo-strong"},"x-props")," 来给传递给具体的表单 UI 组件："),a.createElement(s,{code:'{\n  "type": "string",\n  "x-rules": [\n    {\n      "pattern": "\\\\d+",\n      "message": "必须是数字"\n    }\n  ],\n  "x-props": {\n    "multiple": true\n  }\n}\n',justCode:!0,lang:"json"}),a.createElement("h2",{id:"表单字段顺序描述",className:"react-demo-h2"},"表单字段顺序描述"),a.createElement("p",{className:"react-demo-p"},"因为 JSON Schema 描述对象型数据结构同样是使用对象结构来描述，但是想要映射到 UI 界面上，就会存在一个显示顺序的问题，对象 key 是无序的，所以，我们就扩展了 ",a.createElement("strong",{className:"react-demo-strong"},"x-index")," 来控制字段顺序："),a.createElement(s,{code:'{\n  "type": "object",\n  "properties": {\n    "aa": {\n      "type": "string",\n      "x-rules": [\n        {\n          "pattern": "\\\\d+",\n          "message": "必须是数字"\n        }\n      ],\n      "x-props": {\n        "multiple": true\n      },\n      "x-index": 1\n    },\n    "bb": {\n      "type": "string",\n      "x-rules": [\n        {\n          "pattern": "\\\\d+",\n          "message": "必须是数字"\n        }\n      ],\n      "x-props": {\n        "multiple": true\n      },\n      "x-index": 0\n    }\n  }\n}\n',justCode:!0,lang:"json"}))});r.meta={username:"zhili.wzl",email:"wangzhili56@126.com"},e.exports=r}}]);